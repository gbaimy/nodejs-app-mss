name: CI/CD Pipeline for MSS

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install unzip
        run: sudo apt-get install -y unzip

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.4'

      - name: Install Dependencies
        run: npm install

      - name: Install SonarScanner
        run: |
          wget -qO- https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip -O /tmp/sonar-scanner.zip
          unzip /tmp/sonar-scanner.zip -d /tmp
          echo "/tmp/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=mss-project \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://54.90.247.217:9000 \
            -Dsonar.login=$SONAR_TOKEN

  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .tgz file
        run: |
          mkdir -p temp
          rsync -av --exclude=temp ./ temp/
          tar -czf /home/runner/work/nodejs-app-mss/nodejs-app-mss/my-project.tgz -C temp .
          echo "Generated .tgz file: /home/runner/work/nodejs-app-mss/nodejs-app-mss/my-project.tgz"

      - name: Verify .tgz file
        run: |
          if [ -f /home/runner/work/nodejs-app-mss/nodejs-app-mss/my-project.tgz ]; then
            echo "Packaging successful: /home/runner/work/nodejs-app-mss/nodejs-app-mss/my-project.tgz"
          else
            echo "Error: .tgz file not found!"
            exit 1
          fi

      - name: Save artifact for upload
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact
          path: /home/runner/work/nodejs-app-mss/nodejs-app-mss/my-project.tgz

  retrieve_artifact:
    runs-on: ubuntu-latest
    steps:
      - name: Create artifact download directory
        run: |
          mkdir -p /home/runner/work/nodejs-app-mss/nodejs-app-mss/downloaded-artifact

      - name: Download artifact
        run: |
          ARTIFACT_URL="https://github.com/gbaimy/nodejs-app-mss/actions/runs/12906227635/artifacts/2467137616"
          OUTPUT_FILE="/home/runner/work/nodejs-app-mss/nodejs-app-mss/downloaded-artifact/my-artifact.zip"
          curl -L -o "$OUTPUT_FILE" "$ARTIFACT_URL"
          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "Error: Artifact download failed."
            exit 1
          else
            echo "Artifact downloaded successfully: $OUTPUT_FILE"
          fi

      - name: Verify downloaded artifact file type
        run: |
          file /home/runner/work/nodejs-app-mss/nodejs-app-mss/downloaded-artifact/my-artifact.zip

      - name: Extract artifact
        run: |
          INPUT_FILE="/home/runner/work/nodejs-app-mss/nodejs-app-mss/downloaded-artifact/my-artifact.zip"
          OUTPUT_DIR="/home/runner/work/nodejs-app-mss/nodejs-app-mss/extracted-artifact"
          mkdir -p "$OUTPUT_DIR"
          unzip "$INPUT_FILE" -d "$OUTPUT_DIR"
          if [ $? -ne 0 ]; then
            echo "Error: Failed to extract artifact."
            exit 1
          else
            echo "Artifact extracted to: $OUTPUT_DIR"
          fi

  upload_artifact:
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Upload Node.js Artifact to Nexus
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_URL: ${{ secrets.NEXUS_URL }}
        run: |
          artifact_path=$(find /home/runner/work/nodejs-app-mss/nodejs-app-mss/extracted-artifact -name "*.tgz" | head -n 1)
          if [ -z "$artifact_path" ]; then
            echo "Error: No .tgz file found in /home/runner/work/nodejs-app-mss/nodejs-app-mss/extracted-artifact"
            exit 1
          else
            echo "Found artifact: $artifact_path"
          fi

          if [ -z "$NEXUS_URL" ] || [ -z "$NEXUS_USERNAME" ] || [ -z "$NEXUS_PASSWORD" ]; then
            echo "Error: Missing Nexus credentials or URL."
            exit 1
          fi

          NEXUS_URL="${NEXUS_URL%/}"
          curl -u "$NEXUS_USERNAME:$NEXUS_PASSWORD" \
            --upload-file "$artifact_path" \
            "$NEXUS_URL/repository/mss-npm-project/$(basename "$artifact_path")"
          echo "Upload complete."
