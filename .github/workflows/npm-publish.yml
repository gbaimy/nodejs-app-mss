name: CI/CD Pipeline for MSS

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install unzip
        run: sudo apt-get install -y unzip

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.4'

      - name: Install Dependencies
        run: npm install

      - name: Install SonarScanner
        run: |
          wget -qO- https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip -O /tmp/sonar-scanner.zip
          unzip /tmp/sonar-scanner.zip -d /tmp
          echo "/tmp/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=mss-project \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://52.91.43.172:9000\
            -Dsonar.login=$SONAR_TOKEN

  package:
      needs: build
      runs-on: ubuntu-latest
      steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .tgz file
        run: |
          mkdir -p temp
          rsync -av --exclude=temp ./ temp/
          tar -czf my-project.tgz -C temp .
          echo "Generated .tgz file: $(pwd)/my-project.tgz"

      - name: Verify .tgz file
        run: |
          if [ -f my-project.tgz ]; then
            echo "Packaging successful: $(pwd)/my-project.tgz"
          else
            echo "Error: .tgz file not found!"
            exit 1
          fi

      - name: Create artifact directory
        run: mkdir -p my-artifact

      - name: Move .tgz file to artifact directory
        run: mv my-project.tgz my-artifact/

      - name: Save artifact for upload
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact
          path: my-artifact
          
uploads:
  needs: package
  runs-on: ubuntu-latest
  steps:
    - name: Unzip artifact from specified path
      run: |
        artifact_path=$(find /home/runner/work/nodejs-app-mss/nodejs-app-mss -name "*.zip" | head -n 1)
        if [ -z "$artifact_path" ]; then
          echo "Error: No .zip file found in /home/runner/work/nodejs-app-mss/nodejs-app-mss"
          exit 1
        fi
        echo "Found artifact to unzip: $artifact_path"
        mkdir -p extracted-artifact
        unzip "$artifact_path" -d extracted-artifact
        echo "Artifact extracted to: $(pwd)/extracted-artifact"

    - name: Upload Node.js Artifact to Nexus
      env:
        NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
        NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        NEXUS_URL: ${{ secrets.NEXUS_URL }}
      run: |
        artifact_path=$(find ./extracted-artifact -name "*.tgz" | head -n 1)
        if [ -z "$artifact_path" ]; then
          echo "Error: No .tgz file found in extracted-artifact directory."
          exit 1
        else
          echo "Found artifact: $artifact_path"
        fi

        if [ -z "$NEXUS_URL" ] || [ -z "$NEXUS_USERNAME" ] || [ -z "$NEXUS_PASSWORD" ]; then
          echo "Error: Missing Nexus credentials or URL."
          exit 1
        fi

        NEXUS_URL="${NEXUS_URL%/}"
        curl -u "$NEXUS_USERNAME:$NEXUS_PASSWORD" \
          --upload-file "$artifact_path" \
          "$NEXUS_URL/repository/MSS-NPM-PROJECT/$(basename "$artifact_path")"
        echo "Upload complete."
